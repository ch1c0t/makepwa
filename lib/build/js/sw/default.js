// Generated by CoffeeScript 2.5.1
(function() {
  var DEFAULT_SW, createCoffeeFile, fs, glob, prepareAssetsString, runWebpack;

  fs = require('fs');

  glob = require('glob');

  ({runWebpack} = require('../common'));

  DEFAULT_SW = '/tmp/makepwa/sw.coffee';

  exports.buildDefaultSW = function() {
    var assets, paths;
    paths = glob.sync(`${DIST}/**/*`, {
      nodir: true
    });
    assets = paths.map(function(asset) {
      return asset.replace(DIST, '');
    }).filter(function(asset) {
      return asset !== '/sw.js';
    });
    console.log(assets);
    createCoffeeFile(['/', ...assets]);
    return runWebpack({
      entry: DEFAULT_SW,
      output: `${DIST}/sw.js`
    });
  };

  prepareAssetsString = function(assets) {
    var lines;
    lines = assets.map(function(asset) {
      return `  '${asset}'`;
    }).join('\n');
    return `[\n${lines}\n]`;
  };

  createCoffeeFile = function(assets) {
    return fs.writeFileSync(DEFAULT_SW, `VERSION = '0'
CACHE_NAME = "assets-" + VERSION
CACHE = caches.open CACHE_NAME
ASSETS = ${prepareAssetsString(assets)}

precacheAssets = (event) ->
  event.waitUntil CACHE.then (cache) ->
    cache.addAll ASSETS

deleteOldCaches = (event) ->
  event.waitUntil caches.keys().then (names) ->
    for name in names
      if (name.startsWith 'assets-') and (name isnt CACHE_NAME)
        caches.delete name
    Promise.resolve()

self.oninstall = precacheAssets
self.onactivate = deleteOldCaches


revalidate = (request) ->
  new Promise (resolve, reject) ->
    fetch(request).then (response) ->
      if response.ok
        CACHE.then (cache) ->
          cache.put request, response.clone()
        resolve response
      else
        reject()

getFromCache = (request) ->
  new Promise (resolve, reject) ->
    CACHE.then (cache) ->
      cache
        .match request
        .then (response) ->
          if response?.ok
            resolve response
          else
            reject()

self.onfetch = (event) ->
  { request } = event

  return unless request.method is 'GET'
  return unless request.url.startsWith self.location.origin

  cacheResponse = getFromCache request
  networkResponse = revalidate request
  event.respondWith Promise.any [cacheResponse, networkResponse]`);
  };

}).call(this);
