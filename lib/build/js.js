// Generated by CoffeeScript 2.5.1
(function() {
  var YAML, buildDependencies, buildScripts, buildWorkers, ensureDirExists, existsSync, handleWebpackErrors, readFileSync, runWebpack, webpack, writeFileSync;

  ({readFileSync, writeFileSync, existsSync} = require('fs'));

  require('path');

  webpack = require('webpack');

  YAML = require('yaml');

  ({ensureDirExists} = require('../util'));

  handleWebpackErrors = function(error, stats) {
    var info;
    if (error) {
      console.error(error.stack || error);
      if (error.details) {
        console.error(error.details);
      }
      return;
    }
    info = stats.toJson();
    if (stats.hasErrors()) {
      console.error(info.errors);
    }
    if (stats.hasWarnings()) {
      return console.warn(info.warnings);
    }
  };

  runWebpack = function({entry, output}) {
    var conf, dir, load_coffee, name;
    dir = path.dirname(output);
    name = path.basename(output);
    load_coffee = {
      test: /\.coffee$/,
      use: 'coffee-loader'
    };
    conf = {
      mode: 'production',
      entry: entry,
      output: {
        path: dir,
        filename: name
      },
      module: {
        rules: [load_coffee]
      }
    };
    return webpack(conf, handleWebpackErrors);
  };

  buildDependencies = function() {
    var file, generateWebpackEntry, spec;
    file = `${SRC}/dependencies.yml`;
    if (existsSync(file)) {
      spec = YAML.parse(readFileSync(file, 'utf-8'));
      return generateWebpackEntry = function(spec) {};
    }
  };

  buildScripts = function() {
    var sourceDir, targetDir;
    sourceDir = `${SRC}/scripts`;
    failIfDirNotExists(sourceDir);
    targetDir = `${DIST}/scripts`;
    ensureDirExists(targetDir);
    return runWebpack({
      entry: `${sourceDir}/main.coffee`,
      output: `${targetDir}/main.js`
    });
  };

  buildWorkers = function() {
    var sourceDir;
    sourceDir = `${SRC}/workers`;
    failIfDirNotExists(sourceDir);
    return runWebpack({
      entry: `${sourceDir}/sw.coffee`,
      output: `${DIST}/sw.js`
    });
  };

  module.exports = {buildDependencies, buildScripts, buildWorkers};

}).call(this);
