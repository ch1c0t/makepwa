// Generated by CoffeeScript 2.5.1
(function() {
  var CWD, DIST, SRC, basename, buildPages, buildScripts, buildStyles, ensureDirExists, failIfDirNotExists, glob, pug, readFileSync, sass, webpack, writeFileSync;

  ({readFileSync, writeFileSync} = require('fs'));

  ({basename} = require('path'));

  glob = require('glob');

  pug = require('pug');

  sass = require('sass');

  webpack = require('webpack');

  ({failIfDirNotExists, ensureDirExists} = require('./util'));

  CWD = process.cwd();

  SRC = `${CWD}/src`;

  DIST = `${CWD}/dist`;

  exports.build = function() {
    ensureDirExists(DIST);
    buildPages();
    buildStyles();
    return buildScripts();
  };

  buildPages = function() {
    var dir, fn, i, j, len, names, results, source, sources;
    dir = `${SRC}/pages`;
    failIfDirNotExists(dir);
    sources = glob.sync(`${dir}/*.pug`);
    names = sources.map(function(file) {
      return basename(file, '.pug');
    });
    results = [];
    for (i = j = 0, len = sources.length; j < len; i = ++j) {
      source = sources[i];
      fn = pug.compile(readFileSync(source, 'utf-8'));
      results.push(writeFileSync(`${DIST}/${names[i]}.html`, fn()));
    }
    return results;
  };

  buildStyles = function() {
    var result, sourceDir, targetDir;
    sourceDir = `${SRC}/styles`;
    failIfDirNotExists(sourceDir);
    result = sass.renderSync({
      file: `${sourceDir}/main.sass`
    });
    targetDir = `${DIST}/styles`;
    ensureDirExists(targetDir);
    return writeFileSync(`${targetDir}/main.css`, result.css.toString());
  };

  buildScripts = function() {
    var conf, load_coffee, sourceDir, targetDir;
    sourceDir = `${SRC}/scripts`;
    failIfDirNotExists(sourceDir);
    targetDir = `${DIST}/scripts`;
    ensureDirExists(targetDir);
    load_coffee = {
      test: /\.coffee$/,
      use: 'coffee-loader'
    };
    conf = {
      entry: `${sourceDir}/main.coffee`,
      output: {
        path: targetDir,
        filename: 'main.js'
      },
      module: {
        rules: [load_coffee]
      }
    };
    return webpack(conf, function(error, stats) {
      var info;
      if (error) {
        console.error(error.stack || error);
        if (error.details) {
          console.error(error.details);
        }
        return;
      }
      info = stats.toJson();
      if (stats.hasErrors()) {
        console.error(info.errors);
      }
      if (stats.hasWarnings()) {
        return console.warn(info.warnings);
      }
    });
  };

}).call(this);
