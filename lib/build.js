// Generated by CoffeeScript 2.5.1
(function() {
  var YAML, basename, build, buildDeps, buildManifest, buildPages, buildScripts, buildStyles, buildWorkers, copyFile, ensureDirExists, failIfDirNotExists, glob, pug, readFileSync, sass, writeFileSync;

  ({readFileSync, writeFileSync, copyFile} = require('fs'));

  ({basename} = require('path'));

  glob = require('glob');

  pug = require('pug');

  sass = require('sass');

  YAML = require('yaml');

  ({failIfDirNotExists, ensureDirExists} = require('./util'));

  ({buildDeps, buildScripts, buildWorkers} = require('./build/js'));

  build = function() {
    ensureDirExists(DIST);
    buildPages();
    buildStyles();
    buildDeps();
    buildScripts();
    buildWorkers();
    return buildManifest();
  };

  buildPages = function() {
    var dir, fn, i, j, len, names, results, source, sources;
    dir = `${SRC}/pages`;
    failIfDirNotExists(dir);
    sources = glob.sync(`${dir}/*.pug`);
    names = sources.map(function(file) {
      return basename(file, '.pug');
    });
    results = [];
    for (i = j = 0, len = sources.length; j < len; i = ++j) {
      source = sources[i];
      fn = pug.compile(readFileSync(source, 'utf-8'));
      results.push(writeFileSync(`${DIST}/${names[i]}.html`, fn()));
    }
    return results;
  };

  buildStyles = function() {
    var result, sourceDir, targetDir;
    sourceDir = `${SRC}/styles`;
    failIfDirNotExists(sourceDir);
    result = sass.renderSync({
      file: `${sourceDir}/main.sass`
    });
    targetDir = `${DIST}/styles`;
    ensureDirExists(targetDir);
    return writeFileSync(`${targetDir}/main.css`, result.css.toString());
  };

  buildManifest = function() {
    var json, manifest;
    ensureDirExists(`${DIST}/icons`);
    copyFile(`${SRC}/icons/icon.192x192.png`, `${DIST}/icons/icon.192x192.png`, function(error) {
      if (error) {
        throw error;
      }
    });
    manifest = YAML.parse(readFileSync(`${SRC}/manifest.yml`, 'utf-8'));
    json = JSON.stringify(manifest, null, 2);
    return writeFileSync(`${DIST}/manifest.webmanifest`, json);
  };

  module.exports = {build, buildPages, buildStyles, buildDeps, buildScripts, buildWorkers, buildManifest};

}).call(this);
